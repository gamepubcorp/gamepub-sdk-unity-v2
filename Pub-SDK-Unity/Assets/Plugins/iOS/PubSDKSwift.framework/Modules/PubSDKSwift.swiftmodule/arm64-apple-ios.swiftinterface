// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PubSDKSwift
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import AuthenticationServices
import CommonCrypto
import CryptoKit
import CryptoSwift
import FBSDKCoreKit
import FBSDKLoginKit
import Foundation
import GoogleSignIn
import KeychainAccess
@_exported import PubSDKSwift
import StoreKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public enum PubHttpClient {
  public static func setup(_ setup: PubSDKSwift.ReqSetup, completion: @escaping (Swift.Result<PubSDKSwift.RespSetup, Alamofire.AFError>) -> Swift.Void)
  public static func install(_ install: PubSDKSwift.ReqInstall, completion: @escaping (Swift.Result<PubSDKSwift.RespPacket, Alamofire.AFError>) -> Swift.Void)
  public static func login(_ login: PubSDKSwift.ReqLogin, completion: @escaping (Swift.Result<PubSDKSwift.RespLogin, Alamofire.AFError>) -> Swift.Void)
  public static func autoLogin(_ atLogin: PubSDKSwift.ReqAutoLogin, completion: @escaping (Swift.Result<PubSDKSwift.RespLogin, Alamofire.AFError>) -> Swift.Void)
  public static func accountLink(_ accLink: PubSDKSwift.ReqAccountLink, completion: @escaping (Swift.Result<PubSDKSwift.RespLogin, Alamofire.AFError>) -> Swift.Void)
  public static func withdraw(_ accWithdraw: PubSDKSwift.ReqWithdraw, completion: @escaping (Swift.Result<PubSDKSwift.RespLogin, Alamofire.AFError>) -> Swift.Void)
  public static func purchase(_ purchase: PubSDKSwift.ReqPurchase, completion: @escaping (Swift.Result<PubSDKSwift.RespPurchase, Alamofire.AFError>) -> Swift.Void)
}
public enum PubSDKError : Swift.Error {
  public enum GeneralErrorReason {
    case notInitialzed
    case notLoggedIn
    case parameterError(name: Swift.String, desc: Swift.String)
  }
  public enum WebSocketErrorReason {
    public struct APIError {
      public let code: Swift.Int
      public let msg: Swift.String?
    }
    case socketTimeout
    case unknownError
    case invalidParameter(apiError: PubSDKSwift.PubSDKError.WebSocketErrorReason.APIError)
  }
  public enum AuthorizeErrorReason {
    case userCancelled
    case notSupportedProvider
    case notSupportedService
    case googleLoginError(code: Swift.Int, message: Swift.String?)
    case facebookAuthError(message: Swift.String?)
    case appleAuthError(code: Swift.Int, message: Swift.String?)
  }
  public enum PurchaseErrorReason {
    case notInitBilling
    case notExistProductList
    case purchaseCancelled
    case notExistProductId
    case notSupportedMarket
    case applePurchaseError(code: Swift.Int, message: Swift.String?)
  }
  public enum UIErrorReason {
  }
  public enum ServerErrorReason {
    case InternalError
    case UnknownError
    case URLSessionError(any Swift.Error)
  }
  case generalError(reason: PubSDKSwift.PubSDKError.GeneralErrorReason)
  case webSocketError(reason: PubSDKSwift.PubSDKError.WebSocketErrorReason)
  case authorizeError(reason: PubSDKSwift.PubSDKError.AuthorizeErrorReason)
  case purchaseError(reason: PubSDKSwift.PubSDKError.PurchaseErrorReason)
  case serverError(reason: PubSDKSwift.PubSDKError.ServerErrorReason)
  case untypedError(error: any Swift.Error)
}
extension PubSDKSwift.PubSDKError {
  public var isURLSessionTimeout: Swift.Bool {
    get
  }
  public func isURLSessionErrorCode(sessionErrorCode code: Swift.Int) -> Swift.Bool
}
extension PubSDKSwift.PubSDKError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension PubSDKSwift.PubSDKError : Foundation.CustomNSError {
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public static var errorDomain: Swift.String {
    get
  }
}
public enum PubSDKErrorUserInfoKey : Swift.String {
  case underlyingError
  case code
  case message
  case parameterName
  case reason
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ReqPurchase : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReqAutoLogin : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReqAccountLink : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RespSetup : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReqWithdraw : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReqLogin : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReqVerifyReceipt : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PubLoginType : Swift.Int {
  case google
  case facebook
  case apple
  case guest
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PubAccountServiceType : Swift.Int {
  case login
  case link
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PubLanguageCode : Swift.String {
  case ko, en, ja, zhcn, zhtw, th, vi, es, pt, fr, de, ru
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PubAPIClient : ObjectiveC.NSObject {
  @objc public static let shared: PubSDKSwift.PubAPIClient
  @objc public func setup(projectId: Swift.Int, completionHandler completion: @escaping (PubSDKSwift.PubSDKSetupResult?, (any Swift.Error)?) -> Swift.Void)
  @objc public func login(loginType: Swift.Int, serviceType: Swift.Int, inViewController vc: UIKit.UIViewController, completionHandler completion: @escaping (PubSDKSwift.PubSDKLoginResult?, (any Swift.Error)?) -> Swift.Void)
  @objc public func autoLogin(completionHandler completion: @escaping (PubSDKSwift.PubSDKLoginResult?, (any Swift.Error)?) -> Swift.Void)
  @objc public func logout()
  @objc public func withdraw(completionHandler completion: @escaping (PubSDKSwift.PubSDKLoginResult?, (any Swift.Error)?) -> Swift.Void)
  @objc public func initBilling(completionHandler completion: @escaping (PubSDKSwift.PubSDKProductList?, (any Swift.Error)?) -> Swift.Void)
  @objc public func purchase(productId: Swift.String, channelId: Swift.String, characterId: Swift.String, completionHandler completion: @escaping (PubSDKSwift.PubSDKPurchaseResult?, (any Swift.Error)?) -> Swift.Void)
  @objc public func openTerms()
  @objc public func openImageBanner()
  @objc public func openHelp()
  @objc public func setPushToken(pushToken: Swift.String)
  @objc public func setPushConfig(agreedPush: Swift.Bool, agreedNightPush: Swift.Bool)
  @objc public func testSDK(completionHandler completion: @escaping (PubSDKSwift.PubSDKLoginResult?, (any Swift.Error)?) -> Swift.Void)
  @objc public func testFunc(completionHandler completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  public func userInfoUpdate(languageCode: PubSDKSwift.PubLanguageCode, push: Swift.Bool, pushNight: Swift.Bool, pushAd: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
public struct PubPurchaseData : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct PubInAppProduct : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class PubSDKSetupResult : ObjectiveC.NSObject {
  @objc public var msg: Swift.String? {
    @objc get
  }
  @objc public var versionCode: Swift.String? {
    @objc get
  }
  @objc public var store: Swift.String? {
    @objc get
  }
  @objc public var json: Swift.String? {
    @objc get
  }
  @objc deinit
}
public struct RespLogin : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReqInstall : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PubUnitResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ReqInApp : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias ProductIdentifier = Swift.String
public typealias ProductsRequestCompletionHandler = (_ success: Swift.Bool, _ products: [StoreKit.SKProduct]?) -> Swift.Void
@objc open class IAPHelper : ObjectiveC.NSObject {
  public init(productIds: Swift.Set<PubSDKSwift.ProductIdentifier>)
  @objc deinit
}
extension PubSDKSwift.IAPHelper {
  public func requestProducts(_ completionHandler: @escaping PubSDKSwift.ProductsRequestCompletionHandler)
  public func buyProduct(_ product: StoreKit.SKProduct)
  public func isProductPurchased(_ productIdentifier: PubSDKSwift.ProductIdentifier) -> Swift.Bool
  public class func canMakePayments() -> Swift.Bool
  public func restorePurchases()
}
extension PubSDKSwift.IAPHelper : StoreKit.SKProductsRequestDelegate {
  @objc dynamic public func productsRequest(_ request: StoreKit.SKProductsRequest, didReceive response: StoreKit.SKProductsResponse)
  @objc dynamic public func request(_ request: StoreKit.SKRequest, didFailWithError error: any Swift.Error)
}
extension PubSDKSwift.IAPHelper : StoreKit.SKPaymentTransactionObserver {
  @objc dynamic public func paymentQueue(_ queue: StoreKit.SKPaymentQueue, updatedTransactions transactions: [StoreKit.SKPaymentTransaction])
}
public struct PubSetupResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol AuthProtocol {
  func request(completionHandler completion: @escaping (PubSDKSwift.PubSDKLoginResult?, (any Swift.Error)?) -> Swift.Void)
}
public struct PubLoginResult : Swift.Encodable {
  public let code: Swift.Int
  public let message: Swift.String
  public let accountId: Swift.String
  public let accessToken: Swift.String
  public let regMessage: Swift.String
  public let startDate: Swift.String
  public let endDate: Swift.String
  public let clickLink: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RespPacket : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class PubSDKProductList : ObjectiveC.NSObject {
  @objc public var json: Swift.String? {
    @objc get
  }
  @objc deinit
}
public struct ReqSetup : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PubProfile {
}
public struct RespPurchase : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Constants {
  public static let SDKVersion: Swift.String
}
public struct PubPurchaseResult : Swift.Encodable {
  public let price: Swift.Float
  public let gamepubProductId: Swift.String
  public let currency: Swift.String
  public let gamepubTid: Swift.String
  public let purchaseToken: Swift.String
  public let marketProductId: Swift.String
  public let originalJSONData: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class PubSDKUnitResult : ObjectiveC.NSObject {
  @objc public var json: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class PubSDKLoginResult : ObjectiveC.NSObject {
  @objc public var accountID: Swift.String? {
    @objc get
  }
  @objc public var json: Swift.String? {
    @objc get
  }
  @objc deinit
}
public struct PubProductList : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class PubSDKPurchaseResult : ObjectiveC.NSObject {
  @objc public var price: Swift.Float {
    @objc get
  }
  @objc public var gamepubProductId: Swift.String? {
    @objc get
  }
  @objc public var currency: Swift.String? {
    @objc get
  }
  @objc public var gamepubTid: Swift.String? {
    @objc get
  }
  @objc public var purchaseToken: Swift.String? {
    @objc get
  }
  @objc public var marketProductId: Swift.String? {
    @objc get
  }
  @objc public var originalJSONData: Swift.String? {
    @objc get
  }
  @objc public var json: Swift.String? {
    @objc get
  }
  @objc deinit
}
extension PubSDKSwift.PubSDKErrorUserInfoKey : Swift.Equatable {}
extension PubSDKSwift.PubSDKErrorUserInfoKey : Swift.Hashable {}
extension PubSDKSwift.PubSDKErrorUserInfoKey : Swift.RawRepresentable {}
extension PubSDKSwift.PubLoginType : Swift.Equatable {}
extension PubSDKSwift.PubLoginType : Swift.Hashable {}
extension PubSDKSwift.PubLoginType : Swift.RawRepresentable {}
extension PubSDKSwift.PubAccountServiceType : Swift.Equatable {}
extension PubSDKSwift.PubAccountServiceType : Swift.Hashable {}
extension PubSDKSwift.PubAccountServiceType : Swift.RawRepresentable {}
extension PubSDKSwift.PubLanguageCode : Swift.Equatable {}
extension PubSDKSwift.PubLanguageCode : Swift.Hashable {}
extension PubSDKSwift.PubLanguageCode : Swift.RawRepresentable {}
